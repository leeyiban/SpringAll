<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--本质是基于Spring做的配置文件-->
<!--扫描组件-->
    <context:component-scan base-package="com.ezplatform.mvc"/>


<!--    如果以下条件的话,就会被我们的视图解析器解析,实现页面的跳转-->
<!--    可以直接复制的-->
<!--    这下面都是spring的内容-->
    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver"
          class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
<!--        设置优先级-->
        <property name="order" value="1"/>
<!--        字符集-->
        <property name="characterEncoding" value="UTF-8"/>
<!--        内部有个templateEngine的属性 ,值是一个对象-->
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
<!--                为这个内置的属性附上默认值-->
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
<!--                        模板模型-->
                        <property name="templateMode" value="HTML5"/>
<!--                        编码-->
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


<!--    视图控制器view-controller-->
    <!--path：设置处理的请求地址 view-name：设置请求地址所对应的视图名称-->
    <mvc:view-controller path="/testView" view-name="success"></mvc:view-controller>
    <mvc:view-controller path="/restfulindex" view-name="B20220606_restfulindex"/>
    <mvc:view-controller path="/restful/employeePage" view-name="B20220610_addEmployee"/>
<!--    注：当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：-->

<!--    测试报文转化 httpMessageConventer-->
    <mvc:view-controller path="/testRequestBodyPage" view-name="B20220620_RequestBody"/>
    <mvc:view-controller path="/uploadPage" view-name="B20220620_FIleUpAndDown"/>



    <mvc:annotation-driven >
        <!-- 处理响应中文内容乱码!!!
         视频中这部分没讲, 是我从.md中找的
         -->
        <mvc:message-converters>
            <!-- 处理响应中文内容乱码 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8" />
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>

    </mvc:annotation-driven>

    <!--开启这个注解才能处理静态资源，例如html、js、css、jpg
    若只设置该标签，则只能访问静态资源，其他请求则无法访问
    此时必须设置<mvc:annotation-driven/>解决问题

    为什么要添加这个注解:
       1. 如果不开启这个注解,那么所有的请求都会被Springmvc去解析,他解析不到静态资源,就会报错
       2. 添加了这个注解之后,如果Springmvc解析不了,那他就会被当做普通的Servlet去解析,这会就能正常的额访问静态资源了

       这个注解必须配合上面的annotation-driven 注解驱动器来配合使用!
    -->
    <mvc:default-servlet-handler></mvc:default-servlet-handler>


<!--    只有写了这个,才能将前端传递过来的附件,和控制器中的形参匹配起来
        必须通过文件解析器的解析才能将文件转换为MultipartFile对象
-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>




<!--    配置拦截器-->
    <mvc:interceptors>
<!--        <bean class="com.ezplatform.mvc.controller.A20220630_Interceptor"></bean>-->
<!--        <ref bean="A20220630_Interceptor_Demo2"></ref>&lt;!&ndash;这种方式是需要在类上加上@compent  让Spring扫描到容器中，才能在这里应用到！&ndash;&gt;-->
        <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->
        <mvc:interceptor>
            <mvc:mapping path="/**"/><!--如果这里是/*的话 ，只代表过滤从系统上下文路径下的一层路径    /**代表拦截所有请求-->
            <mvc:exclude-mapping path="/"/>
            <ref bean="A20220630_Interceptor_Demo2"></ref>
        </mvc:interceptor>
        <!--
            以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
        -->
    </mvc:interceptors>




<!--    因为启用了注解开启异常捕捉,所以暂时注释配置信息-->

<!--   <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
        上面两个都是固定格式
        -->
   <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">  &lt;!&ndash;固定值,这里就是exceptionMappings  提示的信息中显示需要的参数是properties类型&ndash;&gt;
            <props>
                &lt;!&ndash;
                    properties的键表示处理器方法执行过程中出现的异常
                    properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面
        	    &ndash;&gt;
                <prop key="com.ezplatform.mvc.exception.ThrowException">B20220708_CatchExceptionSuccess</prop>

            </props>

        </property>
&lt;!&ndash;        exceptionAttribute是必须的  value相当于给异常起了个别名&ndash;&gt;
        <property name="exceptionAttribute" value="ex"/>

    </bean>-->


</beans>